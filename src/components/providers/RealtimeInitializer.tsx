'use client'

import { ReactNode, useEffect, useRef } from 'react'
import { useRealtimeManager } from '@/hooks/useRealtimeManager'
import { useUser, useAppDispatch } from '@/store/hooks'
import { loadUserProfile } from '@/store/slices/authSlice'
import { loadUserStats, loadStreakData } from '@/store/slices/userDataSlice'

interface RealtimeInitializerProps {
  children: ReactNode
}

/**
 * Componente que inicializa RealtimeManager + Sincronizaci√≥n H√≠brida Inteligente
 */
export function RealtimeInitializer({ children }: RealtimeInitializerProps) {
  // Este hook se encarga de toda la l√≥gica de inicializaci√≥n de realtime
  useRealtimeManager()
  
  // üéØ SINCRONIZACI√ìN H√çBRIDA: Hooks para detectar datos incompletos
  const user = useUser()
  const dispatch = useAppDispatch()
  
  // üéØ Trackear si ya ejecutamos sincronizaci√≥n inicial en esta sesi√≥n
  const hasSyncedOnce = useRef(false)
  
  // üîÑ SINCRONIZACI√ìN INICIAL INTELIGENTE
  useEffect(() => {
    // Solo ejecutar si hay usuario autenticado
    if (!user?.id) return
    
    // Verificar si faltan datos cr√≠ticos (solo datos est√°ticos en authSlice)
    const missingCriticalData = user.total_checkins === undefined
    
    // üöÄ NUEVA L√ìGICA: Forzar sincronizaci√≥n en primer mount O si faltan datos
    const shouldSync = missingCriticalData || !hasSyncedOnce.current

    if (shouldSync) {
      const reason = missingCriticalData ? 'datos_incompletos' : 'primer_mount_garantizar_datos_frescos'
      
      console.log(`üîÑ Sincronizaci√≥n inicial: ${reason}`, {
        userId: user.id,
        total_checkins: user.total_checkins,
        hasSyncedBefore: hasSyncedOnce.current
      })
      
      // Forzar carga de datos frescos
      Promise.all([
        dispatch(loadUserProfile(user.id)),     // authSlice: datos est√°ticos
        dispatch(loadUserStats(user.id)),       // userData: userStats
        dispatch(loadStreakData(user.id))       // userData: streakData
      ])
        .then(() => {
          console.log('‚úÖ Sincronizaci√≥n inicial completada: authSlice + userData cargados')
          hasSyncedOnce.current = true
        })
        .catch((error) => {
          console.error('‚ùå Error en sincronizaci√≥n inicial:', error)
        })
    } else {
      console.log('‚úÖ Sincronizaci√≥n inicial ya ejecutada en esta sesi√≥n', {
        total_checkins: user.total_checkins
      })
    }
  }, [user?.id, user?.total_checkins, dispatch])

  // No necesita envolver children en ning√∫n Context, solo inicializa
  return <>{children}</>
}
