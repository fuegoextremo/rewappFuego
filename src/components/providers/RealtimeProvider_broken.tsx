import { createContext, useContext, useEffect, useState, ReactNode, useCallback } from 'react'
import { useQueryClient } from '@tanstack/react-query'
import { createClientBrowser } from '@/lib/supabase/client'
import { useToast } from '@/hooks/use-toast'
import { useAppDispatch, useUser } from '@/store/hooks'
import { loadUserProfile } from '@/store/slices/authSlice'

interface RealtimeContextType {
  isConnected: boolean
  // No exponemos connectUser/disconnectUser - se maneja autom√°ticamente
}

const RealtimeContext = createContext<RealtimeContextType | null>(null)

interface RealtimeProviderProps {
  children: ReactNode
}

export function RealtimeProvider({ children }: RealtimeProviderProps) {
  const queryClient = useQueryClient()
  const { toast } = useToast()
  const dispatch = useAppDispatch()
  const user = useUser() // ‚ú® Obtener usuario del store
  const [isConnected, setIsConnected] = useState(false)
  const [currentChannel, setCurrentChannel] = useState<any>(null)
  const [connectedUserId, setConnectedUserId] = useState<string | null>(null)
  const [connectionTimeoutId, setConnectionTimeoutId] = useState<NodeJS.Timeout | null>(null)

  // ‚ú® CONECTAR AUTOM√ÅTICAMENTE cuando hay un usuario con debounce
  useEffect(() => {
    console.log('üîç RealtimeProvider useEffect triggered:', {
      userId: user?.id,
      connectedUserId,
      hasChannel: !!currentChannel,
      userState: user ? 'loaded' : 'null'
    })

    // ‚ú® Limpiar timeout anterior si existe
    if (connectionTimeoutId) {
      clearTimeout(connectionTimeoutId)
    }

    if (user?.id && user.id !== connectedUserId) {
      console.log('üéØ Scheduling connection with debounce...')
      // ‚ú® Debounce de 100ms para evitar conexiones m√∫ltiples durante la carga
      const timeoutId = setTimeout(() => {
        console.log('üéØ Executing delayed connection for:', user.id)
        connectToUser(user.id)
      }, 100)
      
      setConnectionTimeoutId(timeoutId)
    } else if (!user?.id && currentChannel) {
      console.log('üîå User logged out, disconnecting...')
      disconnectFromRealtime()
    } else {
      console.log('‚è≠Ô∏è Skipping connection:', {
        reason: user?.id === connectedUserId ? 'same user' : 'no user'
      })
    }

    return () => {
      if (connectionTimeoutId) {
        clearTimeout(connectionTimeoutId)
      }
    }
  }, [user?.id, connectedUserId]) // ‚ú® Agregar connectedUserId para evitar reconexiones

  const connectToUser = useCallback((userId: string) => {
    // üéØ Si ya estamos conectados al mismo usuario, no hacer nada
    if (connectedUserId === userId && currentChannel) {
      console.log('‚úÖ Realtime ya conectado para usuario:', userId)
      return
    }

    // üéØ Desconectar conexi√≥n anterior si existe
    if (currentChannel) {
      console.log('üîÑ Cambiando conexi√≥n Realtime de', connectedUserId, 'a', userId)
      const supabase = createClientBrowser()
      supabase.removeChannel(currentChannel)
      setCurrentChannel(null)
      setConnectedUserId(null)
      setIsConnected(false)
    }

    console.log('üöÄ Conectando Realtime para usuario:', userId)
    const supabase = createClientBrowser()
    
    // ‚ú® EMPEZAR CON SUSCRIPCI√ìN SIMPLE PARA DIAGN√ìSTICO
    const channel = supabase
      .channel(`user-${userId}-realtime`)
      
      // üéØ Solo escuchar check-ins por ahora (configuraci√≥n m√≠nima)
      .on('postgres_changes', {
        event: 'INSERT',
        schema: 'public',
        table: 'check_ins'
      }, (payload) => {
        console.log('üì® Evento Realtime recibido:', payload)
        
        // ‚ú® Filtrar en el cliente por seguridad
        if (payload.new && payload.new.user_id === userId) {
          console.log('üéâ Nuevo check-in detectado para usuario actual:', payload)
          
          toast({
            title: "üéâ ¬°Check-in realizado!",
            description: "Tu visita ha sido registrada correctamente",
            duration: 3000,
          })

          // ‚ú® INVALIDAR QUERIES RELEVANTES
          queryClient.invalidateQueries({ queryKey: ['user', 'streak', userId] })
          queryClient.invalidateQueries({ queryKey: ['streak', 'stage'] })
          queryClient.invalidateQueries({ queryKey: ['user', userId, 'stats'] })
          queryClient.invalidateQueries({ queryKey: ['user', 'profile', userId] })
          
          // ‚ú® ACTUALIZAR REDUX
          dispatch(loadUserProfile(userId))
          
          // ‚ú® CUSTOM EVENT para componentes
          window.dispatchEvent(new CustomEvent('user-data-updated', { 
            detail: { userId, type: 'check-in', data: payload } 
          }))
        } else {
          console.log('üîá Check-in ignorado (no es del usuario actual)')
        }
      })
      
      // üöß TEMPORALMENTE COMENTADAS OTRAS SUSCRIPCIONES PARA DIAGN√ìSTICO
      /*
      // üéØ Escuchar cambios en user_spins y filtrar en cliente
      .on('postgres_changes', {
        event: 'INSERT',
        schema: 'public',
        table: 'user_spins'
        // ‚ùå Sin filtro server-side
      }, (payload) => {
        if (payload.new && payload.new.user_id === userId) {
          console.log('üé∞ Nueva ruleta detectada para usuario actual:', payload)
          
          toast({
            title: "üé∞ ¬°Ruleta girada!",
            description: "Revisa tu premio en la secci√≥n de ruleta",
            duration: 4000,
          })

          // ‚ú® INVALIDAR QUERIES Y ACTUALIZAR REDUX
          queryClient.invalidateQueries({ queryKey: ['user', userId, 'stats'] })
          queryClient.invalidateQueries({ queryKey: ['user', 'profile', userId] })
          dispatch(loadUserProfile(userId))
          
          // ‚ú® CUSTOM EVENT
          window.dispatchEvent(new CustomEvent('user-data-updated', { 
            detail: { userId, type: 'spin', data: payload } 
          }))
        }
      })
      
      // üéØ Escuchar cambios en rachas y filtrar en cliente
      .on('postgres_changes', {
        event: 'UPDATE',
        schema: 'public',
        table: 'streaks'
        // ‚ùå Sin filtro server-side
      }, (payload) => {
        if (payload.new && payload.new.user_id === userId) {
          console.log('üî• Racha actualizada para usuario actual:', payload)
          
          // ‚ú® INVALIDAR QUERIES RELEVANTES
          queryClient.invalidateQueries({ queryKey: ['user', 'streak', userId] })
          queryClient.invalidateQueries({ queryKey: ['streak', 'stage'] })
          queryClient.invalidateQueries({ queryKey: ['user', userId, 'stats'] })
          queryClient.invalidateQueries({ queryKey: ['user', 'profile', userId] })
          
          // ‚ú® ACTUALIZAR REDUX
          dispatch(loadUserProfile(userId))
          
          // ‚ú® CUSTOM EVENT
          window.dispatchEvent(new CustomEvent('user-data-updated', { 
            detail: { userId, type: 'streak', data: payload } 
          }))
        }
      })
      */
      
      // üéØ Monitorear estado de conexi√≥n
      .on('system', {}, (status: any) => {
        console.log('üì° Estado de conexi√≥n Realtime:', status)
        setIsConnected(status.status === 'ok')
      })
      
      .subscribe((status: any, err?: any) => {
        console.log('üîå Suscripci√≥n Realtime:', status)
        
        if (err) {
          console.error('‚ùå Error en suscripci√≥n:', err)
        }
        
        if (status === 'SUBSCRIBED') {
          console.log('‚úÖ Realtime conectado exitosamente para:', userId)
          setIsConnected(true)
        } else if (status === 'CHANNEL_ERROR') {
          console.error('‚ùå Error de canal Realtime - Posibles causas:')
          console.error('   üîê RLS policies bloqueando la suscripci√≥n')
          console.error('   ÔøΩ Tabla no habilitada para Realtime')
          console.error('   üîë Permisos insuficientes')
          console.error('üîç Detalles:', {
            channel: `user-${userId}-realtime`,
            userId,
            timestamp: new Date().toISOString()
          })
          setIsConnected(false)
        } else if (status === 'CLOSED') {
          console.log('üîå Canal cerrado para usuario:', userId)
          setIsConnected(false)
        }
      })

    setCurrentChannel(channel)
    setConnectedUserId(userId)
  }, [connectedUserId, currentChannel, queryClient, toast, dispatch]) // ‚ú® Dependencias completas

  const disconnectFromRealtime = useCallback(() => {
    if (currentChannel) {
      console.log('üîå Desconectando Realtime para usuario:', connectedUserId)
      const supabase = createClientBrowser()
      supabase.removeChannel(currentChannel)
      setCurrentChannel(null)
      setConnectedUserId(null)
      setIsConnected(false)
    }
  }, [currentChannel, connectedUserId]) // ‚ú® Dependencias necesarias

  // üéØ Cleanup global al desmontar el provider
  useEffect(() => {
    return () => {
      disconnectFromRealtime()
    }
  }, [disconnectFromRealtime]) // ‚ú® Incluir funci√≥n memoizada

  return (
    <RealtimeContext.Provider value={{ isConnected }}>
      {children}
    </RealtimeContext.Provider>
  )
}

export { RealtimeContext }
