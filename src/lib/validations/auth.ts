/**
 * üîê AUTH VALIDATIONS
 * Esquemas de validaci√≥n para formularios de autenticaci√≥n
 * Usando Zod para validaci√≥n del lado cliente
 */

import { z } from 'zod'

// üìß Validaci√≥n de email
export const emailSchema = z
  .string()
  .min(1, 'El email es requerido')
  .email('Formato de email inv√°lido')

// üîê Validaci√≥n de contrase√±a
export const passwordSchema = z
  .string()
  .min(6, 'La contrase√±a debe tener al menos 6 caracteres')

// üì± Validaci√≥n de tel√©fono (con selector de pa√≠s)
export const phoneSchema = z
  .string()
  .min(1, 'El tel√©fono es requerido')
  .refine((phone) => {
    // El componente PhoneInput ya maneja el formato internacional
    // Solo validamos que no est√© vac√≠o y tenga un formato v√°lido
    if (!phone || phone.length < 8) {
      return false
    }
    // Acepta cualquier formato que venga del PhoneInput
    return true
  }, 'N√∫mero de tel√©fono inv√°lido. Ingresa un n√∫mero v√°lido de 10 d√≠gitos.')

// üìÖ Validaci√≥n de fecha de nacimiento
export const birthDateSchema = z
  .string()
  .min(1, 'La fecha de nacimiento es requerida')
  .refine((date) => {
    const birthDate = new Date(date)
    const today = new Date()
    const age = today.getFullYear() - birthDate.getFullYear()
    const monthDiff = today.getMonth() - birthDate.getMonth()
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      return age - 1 >= 13
    }
    
    return age >= 13
  }, 'Debes ser mayor de 13 a√±os')

// üë§ Validaci√≥n de nombre
export const nameSchema = z
  .string()
  .min(1, 'Este campo es requerido')
  .min(2, 'Debe tener al menos 2 caracteres')
  .max(50, 'M√°ximo 50 caracteres')

// ‚úÖ Schema completo para LOGIN
export const loginSchema = z.object({
  email: emailSchema,
  password: passwordSchema,
})

// ‚úÖ Schema completo para REGISTRO
export const registerSchema = z.object({
  firstName: nameSchema,
  lastName: nameSchema,
  email: emailSchema,
  phone: phoneSchema,
  birthDate: birthDateSchema,
  password: passwordSchema,
  confirmPassword: passwordSchema,
  acceptTerms: z.boolean().refine(val => val === true, {
    message: 'Debes aceptar los t√©rminos y condiciones'
  })
}).refine((data) => data.password === data.confirmPassword, {
  message: 'Las contrase√±as no coinciden',
  path: ['confirmPassword']
})

// ‚úÖ Schema para COMPLETAR PERFIL (OAuth)
export const completeProfileSchema = z.object({
  phone: phoneSchema,
  birthDate: birthDateSchema,
  acceptTerms: z.boolean().refine(val => val === true, 'Debes aceptar los t√©rminos y condiciones')
})

// ‚úÖ Schema para FORGOT PASSWORD
export const forgotPasswordSchema = z.object({
  email: emailSchema,
})

// ‚úÖ Schema para RESET PASSWORD
export const resetPasswordSchema = z.object({
  password: passwordSchema,
  confirmPassword: passwordSchema,
}).refine((data) => data.password === data.confirmPassword, {
  message: 'Las contrase√±as no coinciden',
  path: ['confirmPassword']
})

// üìù Tipos TypeScript exportados
export type LoginFormData = z.infer<typeof loginSchema>
export type RegisterFormData = z.infer<typeof registerSchema>
export type CompleteProfileFormData = z.infer<typeof completeProfileSchema>
export type ForgotPasswordFormData = z.infer<typeof forgotPasswordSchema>
export type ResetPasswordFormData = z.infer<typeof resetPasswordSchema>
