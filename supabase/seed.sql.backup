-- =====================================
-- SEED DATA PARA SUPABASE LOCAL
-- =====================================
-- Este archivo crea datos de prueba para desarrollo local
-- Incluye: usuarios admin, clientes, sucursales, premios, etc.

-- =====================================
-- 1. CREAR SUCURSALES DE PRUEBA
-- =====================================
INSERT INTO public.branches (id, name, address, is_active, created_at, updated_at)
VALUES 
  ('11111111-1111-1111-1111-111111111111', 'Sucursal Centro', 'Av. Principal 123', true, NOW(), NOW()),
  ('22222222-2222-2222-2222-222222222222', 'Sucursal Norte', 'Calle Norte 456', true, NOW(), NOW()),
  ('33333333-3333-3333-3333-333333333333', 'Sucursal Sur', 'Blvd. Sur 789', true, NOW(), NOW())
ON CONFLICT (id) DO NOTHING;

-- =====================================
-- 2. CREAR USUARIOS EN AUTH.USERS
-- =====================================
-- NOTA: El trigger handle_new_user() creará automáticamente
-- los registros en user_profiles con email incluido

-- 2.1 SuperAdmin
INSERT INTO auth.users (
  instance_id,
  id,
  aud,
  role,
  email,
  encrypted_password,
  email_confirmed_at,
  raw_user_meta_data,
  created_at,
  updated_at,
  confirmation_token,
  recovery_token
) VALUES (
  '00000000-0000-0000-0000-000000000000',
  'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa',
  'authenticated',
  'authenticated',
  'superadmin@rewapp.local',
  crypt('admin123', gen_salt('bf')),
  NOW(),
  '{"first_name": "Super", "last_name": "Admin"}',
  NOW(),
  NOW(),
  '',
  ''
) ON CONFLICT (id) DO NOTHING;

-- 2.2 Admin
INSERT INTO auth.users (
  instance_id,
  id,
  aud,
  role,
  email,
  encrypted_password,
  email_confirmed_at,
  raw_user_meta_data,
  created_at,
  updated_at,
  confirmation_token,
  recovery_token
) VALUES (
  '00000000-0000-0000-0000-000000000000',
  'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb',
  'authenticated',
  'authenticated',
  'admin@rewapp.local',
  crypt('admin123', gen_salt('bf')),
  NOW(),
  '{"first_name": "Admin", "last_name": "Principal"}',
  NOW(),
  NOW(),
  '',
  ''
) ON CONFLICT (id) DO NOTHING;

-- 2.3 Manager
INSERT INTO auth.users (
  instance_id,
  id,
  aud,
  role,
  email,
  encrypted_password,
  email_confirmed_at,
  raw_user_meta_data,
  created_at,
  updated_at,
  confirmation_token,
  recovery_token
) VALUES (
  '00000000-0000-0000-0000-000000000000',
  'cccccccc-cccc-cccc-cccc-cccccccccccc',
  'authenticated',
  'authenticated',
  'manager@rewapp.local',
  crypt('admin123', gen_salt('bf')),
  NOW(),
  '{"first_name": "Manager", "last_name": "Centro"}',
  NOW(),
  NOW(),
  '',
  ''
) ON CONFLICT (id) DO NOTHING;

-- 2.4 Verificador
INSERT INTO auth.users (
  instance_id,
  id,
  aud,
  role,
  email,
  encrypted_password,
  email_confirmed_at,
  raw_user_meta_data,
  created_at,
  updated_at,
  confirmation_token,
  recovery_token
) VALUES (
  '00000000-0000-0000-0000-000000000000',
  'dddddddd-dddd-dddd-dddd-dddddddddddd',
  'authenticated',
  'authenticated',
  'verificador@rewapp.local',
  crypt('admin123', gen_salt('bf')),
  NOW(),
  '{"first_name": "Verificador", "last_name": "Centro"}',
  NOW(),
  NOW(),
  '',
  ''
) ON CONFLICT (id) DO NOTHING;

-- 2.5 Clientes de prueba (5 clientes)
INSERT INTO auth.users (
  instance_id,
  id,
  aud,
  role,
  email,
  encrypted_password,
  email_confirmed_at,
  raw_user_meta_data,
  created_at,
  updated_at,
  confirmation_token,
  recovery_token
) VALUES 
  (
    '00000000-0000-0000-0000-000000000000',
    '11111111-1111-1111-1111-111111111112',
    'authenticated',
    'authenticated',
    'cliente1@test.com',
    crypt('cliente123', gen_salt('bf')),
    NOW(),
    '{"first_name": "Juan", "last_name": "Pérez"}',
    NOW(),
    NOW(),
    '',
    ''
  ),
  (
    '00000000-0000-0000-0000-000000000000',
    '11111111-1111-1111-1111-111111111113',
    'authenticated',
    'authenticated',
    'cliente2@test.com',
    crypt('cliente123', gen_salt('bf')),
    NOW(),
    '{"first_name": "María", "last_name": "González"}',
    NOW(),
    NOW(),
    '',
    ''
  ),
  (
    '00000000-0000-0000-0000-000000000000',
    '11111111-1111-1111-1111-111111111114',
    'authenticated',
    'authenticated',
    'cliente3@test.com',
    crypt('cliente123', gen_salt('bf')),
    NOW(),
    '{"first_name": "Carlos", "last_name": "López"}',
    NOW(),
    NOW(),
    '',
    ''
  ),
  (
    '00000000-0000-0000-0000-000000000000',
    '11111111-1111-1111-1111-111111111115',
    'authenticated',
    'authenticated',
    'cliente4@test.com',
    crypt('cliente123', gen_salt('bf')),
    NOW(),
    '{"first_name": "Ana", "last_name": "Martínez"}',
    NOW(),
    NOW(),
    '',
    ''
  ),
  (
    '00000000-0000-0000-0000-000000000000',
    '11111111-1111-1111-1111-111111111116',
    'authenticated',
    'authenticated',
    'cliente5@test.com',
    crypt('cliente123', gen_salt('bf')),
    NOW(),
    '{"first_name": "Pedro", "last_name": "Ramírez"}',
    NOW(),
    NOW(),
    '',
    ''
  )
ON CONFLICT (id) DO NOTHING;

-- =====================================
-- 3. ACTUALIZAR ROLES EN USER_PROFILES
-- =====================================
-- El trigger ya creó los user_profiles, ahora actualizamos roles y sucursales

UPDATE public.user_profiles SET role = 'superadmin' WHERE id = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa';
UPDATE public.user_profiles SET role = 'admin', branch_id = '11111111-1111-1111-1111-111111111111' WHERE id = 'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb';
UPDATE public.user_profiles SET role = 'manager', branch_id = '11111111-1111-1111-1111-111111111111' WHERE id = 'cccccccc-cccc-cccc-cccc-cccccccccccc';
UPDATE public.user_profiles SET role = 'verifier', branch_id = '11111111-1111-1111-1111-111111111111' WHERE id = 'dddddddd-dddd-dddd-dddd-dddddddddddd';
UPDATE public.user_profiles SET role = 'client', branch_id = '11111111-1111-1111-1111-111111111111' WHERE id = '11111111-1111-1111-1111-111111111112';
UPDATE public.user_profiles SET role = 'client', branch_id = '11111111-1111-1111-1111-111111111111' WHERE id = '11111111-1111-1111-1111-111111111113';
UPDATE public.user_profiles SET role = 'client', branch_id = '22222222-2222-2222-2222-222222222222' WHERE id = '11111111-1111-1111-1111-111111111114';
UPDATE public.user_profiles SET role = 'client', branch_id = '22222222-2222-2222-2222-222222222222' WHERE id = '11111111-1111-1111-1111-111111111115';
UPDATE public.user_profiles SET role = 'client', branch_id = '33333333-3333-3333-3333-333333333333' WHERE id = '11111111-1111-1111-1111-111111111116';

-- =====================================
-- 4. CREAR PREMIOS DE PRUEBA
-- =====================================

-- 4.1 Premios de Ruleta
INSERT INTO public.prizes (id, name, type, description, image_url, weight, inventory_count, is_active, created_at, updated_at)
VALUES
  ('00000001-0000-0000-0000-000000000001', 'iPhone 15 Pro', 'roulette', 'Smartphone último modelo', '/images/prizes/iphone15.jpg', 5, 2, true, NOW(), NOW()),
  ('00000001-0000-0000-0000-000000000002', 'AirPods Pro', 'roulette', 'Audífonos inalámbricos', '/images/prizes/airpods.jpg', 10, 5, true, NOW(), NOW()),
  ('00000001-0000-0000-0000-000000000003', 'Cupón $50', 'roulette', 'Descuento de $50', '/images/prizes/cupon50.jpg', 30, 100, true, NOW(), NOW()),
  ('00000001-0000-0000-0000-000000000004', 'Cupón $20', 'roulette', 'Descuento de $20', '/images/prizes/cupon20.jpg', 55, 200, true, NOW(), NOW())
ON CONFLICT (id) DO NOTHING;

-- 4.2 Premios de Rachas
INSERT INTO public.prizes (id, name, type, description, image_url, streak_threshold, validity_days, is_active, created_at, updated_at)
VALUES
  ('00000002-0000-0000-0000-000000000003', 'Café Gratis', 'streak', 'Café de cortesía por 3 visitas', '/images/prizes/cafe.jpg', 3, 7, true, NOW(), NOW()),
  ('00000002-0000-0000-0000-000000000007', 'Descuento 20%', 'streak', 'Cupón 20% de descuento', '/images/prizes/descuento20.jpg', 7, 14, true, NOW(), NOW()),
  ('00000002-0000-0000-0000-000000000015', 'Producto Premium', 'streak', 'Producto premium gratis', '/images/prizes/premium.jpg', 15, 30, true, NOW(), NOW())
ON CONFLICT (id) DO NOTHING;

-- 4.3 Premios Manuales (comentados - tabla prizes solo soporta roulette/streak)
-- Los premios manuales se crean desde la interfaz admin según necesidad
-- INSERT INTO public.prizes (id, name, type, description, image_url, validity_days, inventory_count, is_active, created_at, updated_at)
-- VALUES
--   ('prize-manual-001', 'Premio Especial', 'manual', 'Premio especial por evento', '/images/prizes/especial.jpg', 30, 10, true, NOW(), NOW())
-- ON CONFLICT (id) DO NOTHING;

-- =====================================
-- 5. CONFIGURACIÓN DEL SISTEMA
-- =====================================
INSERT INTO public.system_settings (key, value, description, created_at, updated_at)
VALUES
  ('checkin_points_daily', '1', 'Giros por check-in diario', NOW(), NOW()),
  ('max_checkins_per_day', '1', 'Máximo de check-ins por día', NOW(), NOW()),
  ('streak_expiry_days', '90', 'Días hasta que expire la racha', NOW(), NOW()),
  ('streak_break_days', '1', 'Días de inactividad para romper racha', NOW(), NOW())
ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value;

-- =====================================
-- 6. DATOS DE ACTIVIDAD DE PRUEBA
-- =====================================

-- 6.1 Check-ins para clientes
INSERT INTO public.check_ins (user_id, branch_id, check_in_date, spins_earned, created_at)
VALUES
  -- Cliente 1: 5 check-ins en los últimos 5 días
  ('11111111-1111-1111-1111-111111111112', '11111111-1111-1111-1111-111111111111', CURRENT_DATE - INTERVAL '4 days', 1, NOW() - INTERVAL '4 days'),
  ('11111111-1111-1111-1111-111111111112', '11111111-1111-1111-1111-111111111111', CURRENT_DATE - INTERVAL '3 days', 1, NOW() - INTERVAL '3 days'),
  ('11111111-1111-1111-1111-111111111112', '11111111-1111-1111-1111-111111111111', CURRENT_DATE - INTERVAL '2 days', 1, NOW() - INTERVAL '2 days'),
  ('11111111-1111-1111-1111-111111111112', '11111111-1111-1111-1111-111111111111', CURRENT_DATE - INTERVAL '1 day', 1, NOW() - INTERVAL '1 day'),
  ('11111111-1111-1111-1111-111111111112', '11111111-1111-1111-1111-111111111111', CURRENT_DATE, 1, NOW()),
  
  -- Cliente 2: 2 check-ins
  ('11111111-1111-1111-1111-111111111113', '11111111-1111-1111-1111-111111111111', CURRENT_DATE - INTERVAL '1 day', 1, NOW() - INTERVAL '1 day'),
  ('11111111-1111-1111-1111-111111111113', '11111111-1111-1111-1111-111111111111', CURRENT_DATE, 1, NOW())
ON CONFLICT DO NOTHING;

-- 6.2 Rachas para clientes
INSERT INTO public.streaks (user_id, current_count, max_count, last_check_in, expires_at, completed_count, is_just_completed, created_at, updated_at)
VALUES
  ('11111111-1111-1111-1111-111111111112', 5, 5, NOW(), NOW() + INTERVAL '90 days', 0, false, NOW() - INTERVAL '4 days', NOW()),
  ('11111111-1111-1111-1111-111111111113', 2, 2, NOW(), NOW() + INTERVAL '90 days', 0, false, NOW() - INTERVAL '1 day', NOW())
ON CONFLICT (user_id) DO UPDATE SET
  current_count = EXCLUDED.current_count,
  max_count = EXCLUDED.max_count,
  last_check_in = EXCLUDED.last_check_in,
  updated_at = NOW();

-- =====================================
-- RESUMEN DE USUARIOS CREADOS
-- =====================================
-- 
-- 🔐 CREDENCIALES DE PRUEBA:
-- 
-- SuperAdmin:
--   Email: superadmin@rewapp.local
--   Password: admin123
--   Rol: superadmin
-- 
-- Admin:
--   Email: admin@rewapp.local
--   Password: admin123
--   Rol: admin
--   Sucursal: Centro
-- 
-- Manager:
--   Email: manager@rewapp.local
--   Password: admin123
--   Rol: manager
--   Sucursal: Centro
-- 
-- Verificador:
--   Email: verificador@rewapp.local
--   Password: admin123
--   Rol: verifier
--   Sucursal: Centro
-- 
-- Clientes (5):
--   Email: cliente1@test.com - cliente5@test.com
--   Password: cliente123
--   Rol: client
--   Sucursales: Centro, Norte, Sur
-- 
-- =====================================

-- Verificar que todo se creó correctamente
SELECT 
  'Usuarios creados' as tipo,
  COUNT(*) as cantidad
FROM auth.users

UNION ALL

SELECT 
  'Perfiles creados con email' as tipo,
  COUNT(*) as cantidad
FROM user_profiles
WHERE email IS NOT NULL

UNION ALL

SELECT 
  'Sucursales' as tipo,
  COUNT(*) as cantidad
FROM branches

UNION ALL

SELECT 
  'Premios' as tipo,
  COUNT(*) as cantidad
FROM prizes

UNION ALL

SELECT 
  'Check-ins' as tipo,
  COUNT(*) as cantidad
FROM check_ins;
